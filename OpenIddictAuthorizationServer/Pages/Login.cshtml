@page
@model OpenIddictAuthorizationServer.Pages.LoginModel
@{
}

<div class="min-h-screen bg-gradient-to-br from-indigo-50 to-blue-100 dark:from-gray-900 dark:to-gray-800 flex items-center justify-center p-4">
    <div class="container max-w-6xl mx-auto">
        <div class="flex flex-col lg:flex-row bg-white dark:bg-gray-800 rounded-2xl shadow-2xl overflow-hidden">
            <div class="lg:w-1/2 relative hidden lg:block">
                <div class="absolute inset-0 bg-gradient-to-r from-blue-600 to-indigo-800 opacity-90"></div>
                <div class="absolute inset-0 flex items-center justify-center p-12">
                    <div class="text-white text-center">
                        <h1 class="text-4xl font-bold mb-4">Welcome Back</h1>
                        <p class="text-lg opacity-90">Log in to access your secure dashboard and continue your journey with us.</p>
                    </div>
                </div>
            </div>

            <div class="w-full lg:w-1/2 py-12 px-8 md:px-12">
                <div class="max-w-md mx-auto">
                    <h2 class="mb-8 flex justify-center text-3xl font-bold text-gray-900 dark:text-white">Sign In</h2>
                    @if (!Model.ShowMfa)
                    {
                        <div class="flex flex-col space-y-3 mb-6">
                            <!-- Google Button -->
                            <a href="/ExternalLogin?Provider=Google&ReturnUrl=@Uri.EscapeDataString(Model.ReturnUrl ?? "")"
                               class="w-full bg-white border border-gray-300 hover:bg-gray-50 text-gray-800 font-medium py-3 px-4 rounded-lg shadow-sm transition-all flex items-center justify-center gap-3 dark:bg-gray-700 dark:border-gray-600 dark:hover:bg-gray-600 dark:text-white">
                                <svg class="w-5 h-5" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                                    <path d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z" fill="#4285F4" />
                                    <path d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z" fill="#34A853" />
                                    <path d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l3.66-2.84z" fill="#FBBC05" />
                                    <path d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z" fill="#EA4335" />
                                </svg>
                                Continue with Google
                            </a>

                            <!-- Facebook Button -->
                            <a href="/ExternalLogin?Provider=Facebook&ReturnUrl=@Uri.EscapeDataString(Model.ReturnUrl ?? "")"
                               class="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-4 rounded-lg shadow-sm transition-all flex items-center justify-center gap-3">
                                <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
                                    <path d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z" />
                                </svg>
                                Continue with Facebook
                            </a>
                        </div>

                        <!-- Divider -->
                        <div class="flex items-center my-6">
                            <div class="flex-grow border-t border-gray-300 dark:border-gray-600"></div>
                            <span class="flex-shrink-0 px-4 text-sm text-gray-500 dark:text-gray-400">or sign in with email</span>
                            <div class="flex-grow border-t border-gray-300 dark:border-gray-600"></div>
                        </div>

                        @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                        {
                            <div class="mb-6 flex p-4 border-l-4 border-red-500 bg-red-50 dark:bg-gray-700 rounded-md" role="alert">
                                <svg class="flex-shrink-0 w-5 h-5 text-red-500 mt-0.5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z" />
                                </svg>
                                <div class="ml-3 text-sm font-medium text-red-800 dark:text-red-300">
                                    @Model.ErrorMessage
                                </div>
                            </div>
                        }
                        <form method="post" class="space-y-4">
                            <div>
                                <label asp-for="Input.Email" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email address</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400 dark:text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 12a4 4 0 10-8 0 4 4 0 008 0zm0 0v1.5a2.5 2.5 0 005 0V12a9 9 0 10-9 9m4.5-1.206a8.959 8.959 0 01-4.5 1.207" />
                                        </svg>
                                    </div>
                                    <input asp-for="Input.Email"
                                           class="pl-10 w-full bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                           placeholder="you@example.com" autocomplete="email">
                                </div>
                                <span asp-validation-for="Input.Email" class="text-red-500 dark:text-red-400 text-xs mt-1 block"></span>
                            </div>

                            <div>
                                <label asp-for="Input.Password" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Password</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400 dark:text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                                        </svg>
                                    </div>
                                    <input asp-for="Input.Password"
                                           class="pl-10 w-full bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                           placeholder="••••••••" autocomplete="current-password">
                                    <button type="button" data-toggle-password="#Input_Password" class="absolute inset-y-0 right-0 flex items-center pr-3 text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
                                        <svg class="eye-open w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                                        </svg>
                                        <svg class="eye-closed hidden w-5 h-5" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13.875 18.825A10.05 10.05 0 0112 19c-4.478 0-8.268-2.943-9.543-7a9.97 9.97 0 011.563-3.029m5.858.908a3 3 0 114.243 4.243M9.878 9.878l4.242 4.242M9.88 9.88l-3.29-3.29m7.532 7.532l3.29 3.29M3 3l3.59 3.59m0 0A9.953 9.953 0 0112 5c4.478 0 8.268 2.943 9.543 7a10.025 10.025 0 01-4.132 5.411m0 0L21 21" />
                                        </svg>
                                    </button>
                                </div>
                                <span asp-validation-for="Input.Password" class="text-red-500 dark:text-red-400 text-xs mt-1 block"></span>
                            </div>

                            <!-- Remember Me Checkbox -->
                            <div class="flex justify-between items-center mb-2">
                                <div class="flex items-center">
                                    <input asp-for="Input.RememberMe"
                                           class="w-4 h-4 text-blue-600 bg-gray-100 border-gray-300 rounded focus:ring-blue-500 dark:focus:ring-blue-600 dark:ring-offset-gray-800 dark:focus:ring-offset-gray-800 focus:ring-2 dark:bg-gray-700 dark:border-gray-600">
                                    <label asp-for="Input.RememberMe" class="ml-2 text-sm font-medium text-gray-700 dark:text-gray-300">Remember me</label>
                                </div>
                                <a id="forgot-password-link" class="text-sm font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">Forgot password?</a>
                            </div>


                            <!-- Sign In Button -->
                            <button type="submit"
                                    class="w-full bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 text-white font-medium rounded-lg text-base px-5 py-3 text-center transition-all dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                Sign in
                            </button>
                        </form>

                        <div class="flex justify-center text-sm text-gray-600 dark:text-gray-400">
                            Don't have an account? <a href="/register?ReturnUrl=@Uri.EscapeDataString(Model.ReturnUrl ?? "/")" class="ms-1 font-medium text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300">Create account</a>
                        </div>
                    }
                    else
                    {
                        <form method="post" asp-page-handler="Mfa" class="space-y-4">
                            <input type="hidden" asp-for="Input.Email" />
                            <input type="hidden" asp-for="ReturnUrl" />
                            <div>
                                <label asp-for="Input.TotpCode" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Two-Factor Authentication Code</label>
                                <div class="relative">
                                    <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                        <svg class="h-5 w-5 text-gray-400 dark:text-gray-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 11c0-1.1.9-2 2-2h1a2 2 0 012 2v1a2 2 0 01-2 2h-1a2 2 0 01-2-2v-1zm-4 0c0-1.1.9-2 2-2h1a2 2 0 012 2v1a2 2 0 01-2 2h-1a2 2 0 01-2-2v-1zm-4 0c0-1.1.9-2 2-2h1a2 2 0 012 2v1a2 2 0 01-2 2h-1a2 2 0 01-2-2v-1z" />
                                        </svg>
                                    </div>
                                    <input asp-for="Input.TotpCode"
                                           class="pl-10 w-full bg-gray-50 border border-gray-300 text-gray-900 rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500"
                                           placeholder="Enter 6-digit code" autocomplete="off" />
                                </div>
                                @if (!string.IsNullOrEmpty(Model.ErrorMessage))
                                {
                                    <span class="text-red-500 dark:text-red-400 text-xs mt-1 block">
                                        @Model.ErrorMessage
                                    </span>
                                }
                            </div>
                            <button type="submit"
                                    class="w-full bg-blue-600 hover:bg-blue-700 focus:ring-4 focus:ring-blue-300 text-white font-medium rounded-lg text-base px-5 py-3 text-center transition-all dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">
                                Verify Code
                            </button>
                        </form>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<partial name="_ForgotPasswordPartial" />

@if (TempData["SuccessMessage"] != null)
{
    <div id="success-toast" class="fixed top-4 right-4 z-50 bg-green-100 border-l-4 border-green-500 text-green-700 p-4 rounded shadow-md flex items-center max-w-md transition-all duration-300 transform translate-x-0 opacity-100" role="alert">
        <svg class="flex-shrink-0 w-5 h-5 text-green-500" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
        </svg>
        <div class="ml-3 text-sm font-medium">
            @TempData["SuccessMessage"]
        </div>
        <button type="button" class="ml-auto -mx-1.5 -my-1.5 text-green-500 hover:text-green-700 focus:outline-none p-1.5" data-dismiss-target="#success-toast" aria-label="Close">
            <svg class="w-4 h-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            // Password toggle functionality
            document.querySelectorAll('[data-toggle-password]').forEach(button => {
                const targetId = button.getAttribute('data-toggle-password');
                const input = document.querySelector(targetId);
                if (!input) return;
                const eyeOpen = button.querySelector('.eye-open');
                const eyeClosed = button.querySelector('.eye-closed');

                button.addEventListener('click', () => {
                    if (input.type === 'password') {
                        input.type = 'text';
                        eyeOpen.classList.add('hidden');
                        eyeClosed.classList.remove('hidden');
                    } else {
                        input.type = 'password';
                        eyeOpen.classList.remove('hidden');
                        eyeClosed.classList.add('hidden');
                    }
                });
            });

            // Open modal when "Forgot password?" link is clicked
            const forgotPasswordLink = document.querySelector('#forgot-password-link');
            const modal = document.getElementById('forgotPasswordModal');

            if (forgotPasswordLink && modal) {
                forgotPasswordLink.addEventListener('click', (e) => {
                    e.preventDefault();
                    modal.classList.remove('hidden');
                    document.body.classList.add('overflow-hidden');
                });

                // Close modal functionality
                document.querySelectorAll('.close-modal, #modalBackdrop').forEach(el => {
                    el.addEventListener('click', () => {
                        modal.classList.add('hidden');
                        document.body.classList.remove('overflow-hidden');
                        document.getElementById('forgotPasswordForm').reset();
                        document.getElementById('resetSuccess').classList.add('hidden');
                        document.getElementById('resetError').classList.add('hidden');
                    });
                });

                // Form submission
                const form = document.getElementById('forgotPasswordForm');
                form.addEventListener('submit', async (e) => {
                    e.preventDefault();

                    document.getElementById('resetSuccess').classList.add('hidden');
                    document.getElementById('resetError').classList.add('hidden');
                    document.getElementById('email-error').textContent = '';

                    const email = document.getElementById('reset-email').value;
                    const returnUrl = '@Uri.EscapeDataString(Model.ReturnUrl ?? "")';
                    try {
                        const response = await fetch('/api/account/request-reset-password', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ email, returnUrl })
                        });

                        if (!response.ok) {
                            const errorData = await response.json();
                            document.getElementById('errorMessage').textContent = errorData.errorMessage;
                            document.getElementById('resetError').classList.remove('hidden');
                            return;
                        }

                        document.getElementById('resetError').classList.add('hidden');
                        document.getElementById('resetSuccess').classList.remove('hidden');
                        form.reset();

                        setTimeout(() => {
                            modal.classList.add('hidden');
                            document.body.classList.remove('overflow-hidden');
                        }, 3000);

                    } catch (error) {
                        document.getElementById('errorMessage').textContent = 'Error sending reset link. Please try again.';
                        document.getElementById('resetError').classList.remove('hidden');
                    }
                });

                // Prevent closing modal on inner content click
                modal.querySelector('.relative').addEventListener('click', (e) => {
                    e.stopPropagation();
                });
            }

            // Auto-hide toast
            const successToast = document.getElementById('success-toast');
            if (successToast) {
                setTimeout(() => {
                    successToast.classList.add('opacity-0');
                    successToast.classList.add('translate-x-full');
                    setTimeout(() => {
                        successToast.remove();
                    }, 300);
                }, 3000);

                // Close toast when clicking the X button
                const closeButton = successToast.querySelector('[data-dismiss-target="#success-toast"]');
                if (closeButton) {
                    closeButton.addEventListener('click', () => {
                        successToast.classList.add('opacity-0');
                        successToast.classList.add('translate-x-full');
                        setTimeout(() => {
                            successToast.remove();
                        }, 300);
                    });
                }
            }
        });

    </script>
}